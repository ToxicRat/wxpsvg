Index: src/generic/graphicc.cpp
===================================================================
--- src/generic/graphicc.cpp	(revision 50632)
+++ src/generic/graphicc.cpp	(working copy)
@@ -125,10 +125,11 @@
     // adds a cubic Bezier curve from the current point, using two control points and an end point
     virtual void AddCurveToPoint( wxDouble cx1, wxDouble cy1, wxDouble cx2, wxDouble cy2, wxDouble x, wxDouble y );
 
+    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, double startAngle, double endAngle, bool clockwise );
 
     // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
-    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
-
+    virtual void AddEllipticalArc( wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
+    
     // gets the last point of the current path, (0,0) if not yet set
     virtual void GetCurrentPoint( wxDouble* x, wxDouble* y) const;
 
@@ -152,6 +153,8 @@
 
     // draws a an arc to two tangents connecting (current) to (x1,y1) and (x1,y1) to (x2,y2), also a straight line from (current) to (x1,y1)
     virtual void AddArcToPoint( wxDouble x1, wxDouble y1 , wxDouble x2, wxDouble y2, wxDouble r )  ;
+    
+    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
     */
 
     // returns the native path
@@ -795,6 +798,22 @@
         cairo_arc_negative(m_pathContext,x,y,r,startAngle,endAngle);
 }
 
+void wxCairoPathData::AddEllipticalArc( wxDouble x, wxDouble y, wxDouble w, wxDouble h, double startAngle, double endAngle, bool clockwise )
+{
+    // as clockwise means positive in our system (y pointing downwards) 
+    // TODO make this interpretation dependent of the
+    // real device trans
+    cairo_save(m_pathContext);
+    cairo_translate (m_pathContext, x + w / 2., y + h / 2.);
+    cairo_scale(m_pathContext, w / 2., h / 2.);
+    
+    if ( clockwise||(endAngle-startAngle)>=2*M_PI)
+        cairo_arc(m_pathContext, 0.0, 0.0, 1.0, startAngle, endAngle);
+    else
+        cairo_arc_negative(m_pathContext, 0.0, 0.0, 1.0, startAngle, endAngle);
+    cairo_restore(m_pathContext);
+}
+
 // transforms each point of this path by the matrix
 void wxCairoPathData::Transform( const wxGraphicsMatrixData* matrix ) 
 {
Index: src/common/graphcmn.cpp
===================================================================
--- src/common/graphcmn.cpp	(revision 50632)
+++ src/common/graphcmn.cpp	(working copy)
@@ -307,6 +307,21 @@
     GetPathData()->GetCurrentPoint(x,y);
 }
 
+
+//adds an arc of an ellipse bounded by the rectable (x,y,w,h), from startAngle to endAngle (in radians).
+void wxGraphicsPath::AddEllipticalArc(wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble startAngle, wxDouble endAngle, bool clockwise) {
+	AllocExclusive();
+	GetPathData()->AddEllipticalArc(x, y, w, h, startAngle, endAngle, clockwise);
+
+}
+
+
+//
+// These are convenience functions which - if not available natively will be assembled 
+// using the primitives from above
+//
+
+
 // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
 void wxGraphicsPath::AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise )
 {
@@ -314,11 +329,6 @@
     GetPathData()->AddArc(x,y,r,startAngle,endAngle,clockwise);
 }
 
-//
-// These are convenience functions which - if not available natively will be assembled 
-// using the primitives from above
-//
-
 // adds a quadratic Bezier curve from the current point, using a control point and an end point
 void wxGraphicsPath::AddQuadCurveToPoint( wxDouble cx, wxDouble cy, wxDouble x, wxDouble y )
 {
@@ -394,6 +404,11 @@
 // Emulations, these mus be implemented in the ...Data classes in order to allow for proper overrides
 //
 
+
+void wxGraphicsPathData::AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) {
+    AddEllipticalArc(x, y, r, r, startAngle, endAngle, clockwise);
+}
+
 void wxGraphicsPathData::AddQuadCurveToPoint( wxDouble cx, wxDouble cy, wxDouble x, wxDouble y )
 {
     // calculate using degree elevation to a cubic bezier
Index: src/msw/graphics.cpp
===================================================================
--- src/msw/graphics.cpp	(revision 50632)
+++ src/msw/graphics.cpp	(working copy)
@@ -114,6 +114,9 @@
     virtual void AddCurveToPoint( wxDouble cx1, wxDouble cy1, wxDouble cx2, wxDouble cy2, wxDouble x, wxDouble y );
 
 
+	// adds an arc of an ellipse bounded by (x, y, w, h) from startAngle to endAngle
+	virtual void AddEllipticalArc( wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
+
     // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
     virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
 
@@ -703,28 +706,37 @@
     *y = start.Y ;
 }
 
+
+void wxGDIPlusPathData::AddEllipticalArc(wxDouble x, wxDouble y, wxDouble w, wxDouble h, double startAngle, double endAngle, bool clockwise) {
+	RectF r(x, y, w, h);
+	double sweepAngle = endAngle - startAngle;
+
+	if( abs(sweepAngle) >= 2*M_PI)
+	{
+		sweepAngle = 2 * M_PI;
+	}
+	else
+	{
+		if ( clockwise )
+		{
+			if( sweepAngle < 0 )
+				sweepAngle += 2 * M_PI;
+		}
+		else
+		{
+			if( sweepAngle > 0 )
+				sweepAngle -= 2 * M_PI;
+
+		}
+	}
+	m_path->AddArc(r, RadToDeg(startAngle),RadToDeg(sweepAngle));
+
+}
+
 void wxGDIPlusPathData::AddArc( wxDouble x, wxDouble y, wxDouble r, double startAngle, double endAngle, bool clockwise )
 {
-    double sweepAngle = endAngle - startAngle ;
-    if( abs(sweepAngle) >= 2*M_PI)
-    {
-        sweepAngle = 2 * M_PI;
-    }
-    else
-    {
-        if ( clockwise )
-        {
-            if( sweepAngle < 0 )
-                sweepAngle += 2 * M_PI;
-        }
-        else
-        {
-            if( sweepAngle > 0 )
-                sweepAngle -= 2 * M_PI;
-
-        }
-   }
-   m_path->AddArc((REAL) (x-r),(REAL) (y-r),(REAL) (2*r),(REAL) (2*r),RadToDeg(startAngle),RadToDeg(sweepAngle));
+    
+   this->AddEllipticalArc(x-r, y-r, r*2, r*2, startAngle, endAngle, clockwise);
 }
 
 void wxGDIPlusPathData::AddRectangle( wxDouble x, wxDouble y, wxDouble w, wxDouble h )
Index: include/wx/graphics.h
===================================================================
--- include/wx/graphics.h	(revision 50632)
+++ include/wx/graphics.h	(working copy)
@@ -259,14 +259,18 @@
     // gets the last point of the current path, (0,0) if not yet set
     virtual void GetCurrentPoint( wxDouble* x, wxDouble* y) const = 0;
 
-    // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
-    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) = 0;
-
+	// adds an arc of an ellipse bounded by (x, y, w, h) from startAngle to endAngle
+	virtual void AddEllipticalArc( wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble startAngle, wxDouble endAngle, bool clockwise ) = 0;
+    
     //
     // These are convenience functions which - if not available natively will be assembled
     // using the primitives from above
     //
+    
+    // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
+    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise );
 
+
     // adds a quadratic Bezier curve from the current point, using a control point and an end point
     virtual void AddQuadCurveToPoint( wxDouble cx, wxDouble cy, wxDouble x, wxDouble y );
 
@@ -332,14 +336,16 @@
     virtual void GetCurrentPoint( wxDouble* x, wxDouble* y) const;
     wxPoint2DDouble GetCurrentPoint() const;
 
-    // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
-    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
-    void AddArc( const wxPoint2DDouble& c, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise);
-
+    virtual void AddEllipticalArc( wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble startAngle, wxDouble endAngle, bool clockwise );
+	
     //
     // These are convenience functions which - if not available natively will be assembled
     // using the primitives from above
     //
+    
+    // adds an arc of a circle centering at (x,y) with radius (r) from startAngle to endAngle
+    virtual void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise ) ;
+    void AddArc( const wxPoint2DDouble& c, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise);
 
     // adds a quadratic Bezier curve from the current point, using a control point and an end point
     virtual void AddQuadCurveToPoint( wxDouble cx, wxDouble cy, wxDouble x, wxDouble y );
